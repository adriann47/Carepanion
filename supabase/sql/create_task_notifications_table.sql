-- Create task_notifications table for guardian notifications
-- This table stores notifications when assisted users complete or skip tasks

-- Only create table if it doesn't exist
create table if not exists public.task_notifications (
  id bigint generated by default as identity primary key,
  task_id text not null,
  assisted_id uuid references auth.users(id) on delete cascade,
  guardian_id uuid references auth.users(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  title text not null,
  scheduled_at timestamptz,
  action text not null check (action in ('done', 'skipped')),
  action_at timestamptz not null default now(),
  is_read boolean not null default false,
  created_at timestamptz not null default now()
);

-- Enable Row Level Security (safe to run multiple times)
do $$
begin
  -- Check if RLS is already enabled
  if exists (
    select 1 from pg_class c
    join pg_namespace n on n.oid = c.relnamespace
    where c.relname = 'task_notifications'
    and n.nspname = 'public'
    and c.relrowsecurity = true
  ) then
    -- RLS already enabled
    null;
  else
    -- Enable RLS
    alter table public.task_notifications enable row level security;
  end if;
end $$;

-- Enable real-time for this table (safe to run multiple times)
do $$
begin
  -- Check if already in publication
  if exists (
    select 1 from pg_publication_tables
    where pubname = 'supabase_realtime'
    and tablename = 'task_notifications'
  ) then
    -- Already enabled
    null;
  else
    -- Add to publication
    alter publication supabase_realtime add table public.task_notifications;
  end if;
exception
  when others then
    -- Handle any errors (publication might not exist, etc.)
    null;
end $$;-- Drop existing policies if they exist
drop policy if exists task_notifications_select on public.task_notifications;
drop policy if exists task_notifications_insert on public.task_notifications;
drop policy if exists task_notifications_update on public.task_notifications;

-- Policy: Guardians can view their own notifications
create policy task_notifications_select
  on public.task_notifications
  for select
  to authenticated
  using (auth.uid() = guardian_id);

-- Policy: Users can insert notifications (for assisted users recording outcomes)
create policy task_notifications_insert
  on public.task_notifications
  for insert
  to authenticated
  with check (true);

-- Policy: Guardians can update their own notifications (mark as read)
create policy task_notifications_update
  on public.task_notifications
  for update
  to authenticated
  using (auth.uid() = guardian_id)
  with check (auth.uid() = guardian_id);

-- Create indexes for better performance
create index if not exists idx_task_notifications_guardian_id on public.task_notifications(guardian_id);
create index if not exists idx_task_notifications_assisted_id on public.task_notifications(assisted_id);
create index if not exists idx_task_notifications_task_id on public.task_notifications(task_id);
create index if not exists idx_task_notifications_action_at on public.task_notifications(action_at);
create index if not exists idx_task_notifications_is_read on public.task_notifications(is_read);