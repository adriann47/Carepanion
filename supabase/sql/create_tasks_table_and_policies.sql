-- Create tasks table and RLS policies
-- This allows guardians to manage tasks for their assisted users

-- First, ensure the tasks table exists with the expected schema
create table if not exists public.tasks (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete set null,
  title text not null,
  description text,
  category text,
  due_date date not null,
  start_at timestamptz,
  end_at timestamptz,
  status text default 'todo',
  created_at timestamptz not null default now(),
  created_by uuid references auth.users(id),
  created_by_name text
);

-- Enable Row Level Security
alter table public.tasks enable row level security;

-- Drop existing policies if they exist
drop policy if exists tasks_select_own on public.tasks;
drop policy if exists tasks_select_assisted on public.tasks;
drop policy if exists tasks_insert_own on public.tasks;
drop policy if exists tasks_insert_assisted on public.tasks;
drop policy if exists tasks_update_own on public.tasks;
drop policy if exists tasks_update_assisted on public.tasks;
drop policy if exists tasks_delete_own on public.tasks;
drop policy if exists tasks_delete_assisted on public.tasks;

-- Policy: Users can view their own tasks
create policy tasks_select_own
  on public.tasks
  for select
  to authenticated
  using (auth.uid() = user_id);

-- Policy: Guardians can view tasks for their assisted users
create policy tasks_select_assisted
  on public.tasks
  for select
  to authenticated
  using (
    exists (
      select 1 from public.assisted_guardians ag
      where ag.guardian_id = auth.uid()
        and ag.assisted_id = tasks.user_id
        and ag.status = 'accepted'
    )
  );

-- Policy: Users can insert their own tasks
create policy tasks_insert_own
  on public.tasks
  for insert
  to authenticated
  with check (auth.uid() = user_id);

-- Policy: Guardians can insert tasks for their assisted users
create policy tasks_insert_assisted
  on public.tasks
  for insert
  to authenticated
  with check (
    exists (
      select 1 from public.assisted_guardians ag
      where ag.guardian_id = auth.uid()
        and ag.assisted_id = user_id
        and ag.status = 'accepted'
    )
  );

-- Policy: Users can update their own tasks
create policy tasks_update_own
  on public.tasks
  for update
  to authenticated
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- Policy: Guardians can update tasks for their assisted users
create policy tasks_update_assisted
  on public.tasks
  for update
  to authenticated
  using (
    exists (
      select 1 from public.assisted_guardians ag
      where ag.guardian_id = auth.uid()
        and ag.assisted_id = tasks.user_id
        and ag.status = 'accepted'
    )
  )
  with check (
    exists (
      select 1 from public.assisted_guardians ag
      where ag.guardian_id = auth.uid()
        and ag.assisted_id = tasks.user_id
        and ag.status = 'accepted'
    )
  );

-- Policy: Users can delete their own tasks
create policy tasks_delete_own
  on public.tasks
  for delete
  to authenticated
  using (auth.uid() = user_id);

-- Policy: Guardians can delete tasks for their assisted users
create policy tasks_delete_assisted
  on public.tasks
  for delete
  to authenticated
  using (
    exists (
      select 1 from public.assisted_guardians ag
      where ag.guardian_id = auth.uid()
        and ag.assisted_id = tasks.user_id
        and ag.status = 'accepted'
    )
  );

-- Create indexes for better performance
create index if not exists idx_tasks_user_id on public.tasks(user_id);
create index if not exists idx_tasks_due_date on public.tasks(due_date);
create index if not exists idx_tasks_status on public.tasks(status);
create index if not exists idx_assisted_guardians_guardian_id on public.assisted_guardians(guardian_id);
create index if not exists idx_assisted_guardians_assisted_id on public.assisted_guardians(assisted_id);
create index if not exists idx_assisted_guardians_status on public.assisted_guardians(status);

-- Enable real-time for the tasks table (safe to run multiple times)
do $$
begin
  -- Check if already in publication
  if exists (
    select 1 from pg_publication_tables
    where pubname = 'supabase_realtime'
    and tablename = 'tasks'
  ) then
    -- Already enabled
    null;
  else
    -- Add to publication
    alter publication supabase_realtime add table public.tasks;
  end if;
exception
  when others then
    -- Handle any errors (publication might not exist, etc.)
    null;
end $$;